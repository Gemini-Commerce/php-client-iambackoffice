<?php
/**
 * IambackofficeUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IamBackoffice Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IambackofficeUser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IambackofficeUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'iambackofficeUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'birth_date' => 'string',
        'data' => 'array<string,string>',
        'email' => 'string',
        'first_name' => 'string',
        'full_name' => 'string',
        'id' => 'string',
        'image_url' => 'string',
        'insert_instant' => 'string',
        'last_login_instant' => 'string',
        'last_name' => 'string',
        'last_update_instant' => 'string',
        'middle_name' => 'string',
        'mobile_phone' => 'string',
        'password' => 'string',
        'password_change_required' => 'bool',
        'password_last_update_instant' => 'string',
        'preferred_languages' => 'string[]',
        'registrations' => '\OpenAPI\Client\Model\IambackofficeUserRegistration[]',
        'timezone' => 'string',
        'two_factor' => '\OpenAPI\Client\Model\IambackofficeUserTwoFactorConfiguration',
        'username' => 'string',
        'verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'birth_date' => null,
        'data' => null,
        'email' => null,
        'first_name' => null,
        'full_name' => null,
        'id' => null,
        'image_url' => null,
        'insert_instant' => 'int64',
        'last_login_instant' => 'int64',
        'last_name' => null,
        'last_update_instant' => 'int64',
        'middle_name' => null,
        'mobile_phone' => null,
        'password' => null,
        'password_change_required' => null,
        'password_last_update_instant' => 'int64',
        'preferred_languages' => null,
        'registrations' => null,
        'timezone' => null,
        'two_factor' => null,
        'username' => null,
        'verified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => false,
        'birth_date' => false,
        'data' => false,
        'email' => false,
        'first_name' => false,
        'full_name' => false,
        'id' => false,
        'image_url' => false,
        'insert_instant' => false,
        'last_login_instant' => false,
        'last_name' => false,
        'last_update_instant' => false,
        'middle_name' => false,
        'mobile_phone' => false,
        'password' => false,
        'password_change_required' => false,
        'password_last_update_instant' => false,
        'preferred_languages' => false,
        'registrations' => false,
        'timezone' => false,
        'two_factor' => false,
        'username' => false,
        'verified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'birth_date' => 'birthDate',
        'data' => 'data',
        'email' => 'email',
        'first_name' => 'firstName',
        'full_name' => 'fullName',
        'id' => 'id',
        'image_url' => 'imageUrl',
        'insert_instant' => 'insertInstant',
        'last_login_instant' => 'lastLoginInstant',
        'last_name' => 'lastName',
        'last_update_instant' => 'lastUpdateInstant',
        'middle_name' => 'middleName',
        'mobile_phone' => 'mobilePhone',
        'password' => 'password',
        'password_change_required' => 'passwordChangeRequired',
        'password_last_update_instant' => 'passwordLastUpdateInstant',
        'preferred_languages' => 'preferredLanguages',
        'registrations' => 'registrations',
        'timezone' => 'timezone',
        'two_factor' => 'twoFactor',
        'username' => 'username',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'birth_date' => 'setBirthDate',
        'data' => 'setData',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'full_name' => 'setFullName',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'insert_instant' => 'setInsertInstant',
        'last_login_instant' => 'setLastLoginInstant',
        'last_name' => 'setLastName',
        'last_update_instant' => 'setLastUpdateInstant',
        'middle_name' => 'setMiddleName',
        'mobile_phone' => 'setMobilePhone',
        'password' => 'setPassword',
        'password_change_required' => 'setPasswordChangeRequired',
        'password_last_update_instant' => 'setPasswordLastUpdateInstant',
        'preferred_languages' => 'setPreferredLanguages',
        'registrations' => 'setRegistrations',
        'timezone' => 'setTimezone',
        'two_factor' => 'setTwoFactor',
        'username' => 'setUsername',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'birth_date' => 'getBirthDate',
        'data' => 'getData',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'full_name' => 'getFullName',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'insert_instant' => 'getInsertInstant',
        'last_login_instant' => 'getLastLoginInstant',
        'last_name' => 'getLastName',
        'last_update_instant' => 'getLastUpdateInstant',
        'middle_name' => 'getMiddleName',
        'mobile_phone' => 'getMobilePhone',
        'password' => 'getPassword',
        'password_change_required' => 'getPasswordChangeRequired',
        'password_last_update_instant' => 'getPasswordLastUpdateInstant',
        'preferred_languages' => 'getPreferredLanguages',
        'registrations' => 'getRegistrations',
        'timezone' => 'getTimezone',
        'two_factor' => 'getTwoFactor',
        'username' => 'getUsername',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('insert_instant', $data ?? [], null);
        $this->setIfExists('last_login_instant', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('last_update_instant', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('password_change_required', $data ?? [], null);
        $this->setIfExists('password_last_update_instant', $data ?? [], null);
        $this->setIfExists('preferred_languages', $data ?? [], null);
        $this->setIfExists('registrations', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('two_factor', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets data
     *
     * @return array<string,string>|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param array<string,string>|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets insert_instant
     *
     * @return string|null
     */
    public function getInsertInstant()
    {
        return $this->container['insert_instant'];
    }

    /**
     * Sets insert_instant
     *
     * @param string|null $insert_instant insert_instant
     *
     * @return self
     */
    public function setInsertInstant($insert_instant)
    {
        if (is_null($insert_instant)) {
            throw new \InvalidArgumentException('non-nullable insert_instant cannot be null');
        }
        $this->container['insert_instant'] = $insert_instant;

        return $this;
    }

    /**
     * Gets last_login_instant
     *
     * @return string|null
     */
    public function getLastLoginInstant()
    {
        return $this->container['last_login_instant'];
    }

    /**
     * Sets last_login_instant
     *
     * @param string|null $last_login_instant last_login_instant
     *
     * @return self
     */
    public function setLastLoginInstant($last_login_instant)
    {
        if (is_null($last_login_instant)) {
            throw new \InvalidArgumentException('non-nullable last_login_instant cannot be null');
        }
        $this->container['last_login_instant'] = $last_login_instant;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_update_instant
     *
     * @return string|null
     */
    public function getLastUpdateInstant()
    {
        return $this->container['last_update_instant'];
    }

    /**
     * Sets last_update_instant
     *
     * @param string|null $last_update_instant last_update_instant
     *
     * @return self
     */
    public function setLastUpdateInstant($last_update_instant)
    {
        if (is_null($last_update_instant)) {
            throw new \InvalidArgumentException('non-nullable last_update_instant cannot be null');
        }
        $this->container['last_update_instant'] = $last_update_instant;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone mobile_phone
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_change_required
     *
     * @return bool|null
     */
    public function getPasswordChangeRequired()
    {
        return $this->container['password_change_required'];
    }

    /**
     * Sets password_change_required
     *
     * @param bool|null $password_change_required password_change_required
     *
     * @return self
     */
    public function setPasswordChangeRequired($password_change_required)
    {
        if (is_null($password_change_required)) {
            throw new \InvalidArgumentException('non-nullable password_change_required cannot be null');
        }
        $this->container['password_change_required'] = $password_change_required;

        return $this;
    }

    /**
     * Gets password_last_update_instant
     *
     * @return string|null
     */
    public function getPasswordLastUpdateInstant()
    {
        return $this->container['password_last_update_instant'];
    }

    /**
     * Sets password_last_update_instant
     *
     * @param string|null $password_last_update_instant password_last_update_instant
     *
     * @return self
     */
    public function setPasswordLastUpdateInstant($password_last_update_instant)
    {
        if (is_null($password_last_update_instant)) {
            throw new \InvalidArgumentException('non-nullable password_last_update_instant cannot be null');
        }
        $this->container['password_last_update_instant'] = $password_last_update_instant;

        return $this;
    }

    /**
     * Gets preferred_languages
     *
     * @return string[]|null
     */
    public function getPreferredLanguages()
    {
        return $this->container['preferred_languages'];
    }

    /**
     * Sets preferred_languages
     *
     * @param string[]|null $preferred_languages preferred_languages
     *
     * @return self
     */
    public function setPreferredLanguages($preferred_languages)
    {
        if (is_null($preferred_languages)) {
            throw new \InvalidArgumentException('non-nullable preferred_languages cannot be null');
        }
        $this->container['preferred_languages'] = $preferred_languages;

        return $this;
    }

    /**
     * Gets registrations
     *
     * @return \OpenAPI\Client\Model\IambackofficeUserRegistration[]|null
     */
    public function getRegistrations()
    {
        return $this->container['registrations'];
    }

    /**
     * Sets registrations
     *
     * @param \OpenAPI\Client\Model\IambackofficeUserRegistration[]|null $registrations registrations
     *
     * @return self
     */
    public function setRegistrations($registrations)
    {
        if (is_null($registrations)) {
            throw new \InvalidArgumentException('non-nullable registrations cannot be null');
        }
        $this->container['registrations'] = $registrations;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets two_factor
     *
     * @return \OpenAPI\Client\Model\IambackofficeUserTwoFactorConfiguration|null
     */
    public function getTwoFactor()
    {
        return $this->container['two_factor'];
    }

    /**
     * Sets two_factor
     *
     * @param \OpenAPI\Client\Model\IambackofficeUserTwoFactorConfiguration|null $two_factor two_factor
     *
     * @return self
     */
    public function setTwoFactor($two_factor)
    {
        if (is_null($two_factor)) {
            throw new \InvalidArgumentException('non-nullable two_factor cannot be null');
        }
        $this->container['two_factor'] = $two_factor;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


